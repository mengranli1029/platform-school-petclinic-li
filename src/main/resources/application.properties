# database init, supports mysql too
database=h2
spring.sql.init.schema-locations=classpath*:db/${database}/schema.sql
spring.sql.init.data-locations=classpath*:db/${database}/data.sql

# Web
spring.thymeleaf.mode=HTML

# JPA
spring.jpa.hibernate.ddl-auto=none
spring.jpa.open-in-view=false

# Internationalization
spring.messages.basename=messages/messages

# Actuator
management.endpoints.web.exposure.include=*

# Logging
logging.level.org.springframework=INFO
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.context.annotation=TRACE

# Maximum time static resources should be cached
spring.web.resources.cache.cachecontrol.max-age=12h

# ======= Actuator & Prometheus Endpoint Configuration =======
# Exponera specifika actuator endpoints inklusive Prometheus
#management.endpoints.web.exposure.include=health,info,prometheus

# Lägg till applikations-tagg för enkel filtrering på alla metrics
management.metrics.tags.application=${spring.application.name}

# ======= Spring Application Configuration =======
# Applikationens namn (används av Actuator-tagg och OTel service name)
spring.application.name=petclinic

# ======= OpenTelemetry Configuration =======
# OTLP Exporter Endpoint (använder HTTP-protokoll som standard för denna adress)
# Adress till Tempo OTLP HTTP-mottagare (anpassa vid behov)
#otel.exporter.otlp.endpoint=http://tempo.observability.svc.cluster.local:4318
# Alternativ: OTLP Exporter Endpoint (om du behöver använda gRPC-protokoll)
# otel.exporter.otlp.endpoint=http://tempo.observability.svc.cluster.local:4317

# Service name för OpenTelemetry (Använder nu "petclinic" via variabeln)
#otel.service.name=${spring.application.name}

# Trace Sampling Configuration (Kommenterad för labben)
# Sampler probability (1.0 = 100% sampling, dvs skicka alla traces)
# Notera: För att detta ska fungera behöver ofta även 'otel.traces.sampler' sättas, t.ex. 'parentbased_traceidratio'
# otel.traces.sampler.probability=1.0